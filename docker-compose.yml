services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    env_file:
      - .env
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - dbdata1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "7002:3000"
    env_file:
      - .env
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db/${DB_NAME}?schema=public
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    restart: unless-stopped
    env_file:
      - .env
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        PUBLIC_API_DOMAIN: ${DOMAIN}
    environment:
      - PUBLIC_API_DOMAIN=${DOMAIN}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4321 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  caddy:
    image: caddy:latest
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - backend
      - frontend

volumes:
  dbdata1:
